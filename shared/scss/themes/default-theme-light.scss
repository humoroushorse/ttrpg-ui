// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

$primary: mat.$azure-palette;
$tertiary: mat.$blue-palette;
// $warn: mat-palette($mat-red);

// Define the theme object.
$event-planning-theme: mat.define-theme(
  (
    color: (
      theme-type: light,
      primary: $primary,
      tertiary: $tertiary,
      // use-system-variables: true
    ),
    density: (
      scale: 0,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
:root {
  @include mat.all-component-themes($event-planning-theme);
  --primary-color: #{mat.get-theme-color($event-planning-theme, primary, 50)};
  // --primary-on-container: #{mat.get-theme-color($event-planning-theme, on-primary-container)};
  --primary-on-container: black;
  --error-color: #{mat.get-theme-color($event-planning-theme, error, 50)};
  --error-on-container: #{mat.get-theme-color($event-planning-theme, on-error-container)};
}

// Comment out the line below if you want to use the pre-defined typography utility classes.
// For more information: https://material.angular.io/guide/typography#using-typography-styles-in-your-application.
// @include mat.typography-hierarchy($event-planning-theme);

// Comment out the line below if you want to use the deprecated `color` inputs.
// @include mat.color-variants-backwards-compatibility($event-planning-theme);
